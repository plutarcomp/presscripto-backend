name: Deploy Backend to Docker Swarm

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: prescripto-backend
  STACK_NAME: prescripto-stack
  COMPOSE_PATH: /home/${{ secrets.SERVER_USER }}/Academy/docker-stack.yml

jobs:
  build:
    name: 🐋 Build & Push Docker Image
    runs-on: ubuntu-latest
    environment: Dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: 🔐 Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: 🧪 Generar archivo .env desde secrets  
        run: |
          cat <<EOF > .env
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_SSL_MODE=${{ secrets.DB_SSL_MODE }}
          
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          EXP_TOKEN=${{ secrets.EXP_TOKEN }}
          
          GMAIL_USER=${{ secrets.GMAIL_USER }}
          GMAIL_PASSWORD=${{ secrets.GMAIL_PASSWORD }}
          
          SMS_TOKEN=${{ secrets.SMS_TOKEN }}
          SMS_USERNAME=${{ secrets.SMS_USERNAME }}
          EOF
      - name: 🛠️ Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest .

      - name: 📤 Push image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    name: 🚀 Deploy Stack on Server
    runs-on: ubuntu-latest
    needs: build
    environment: Dev

    steps:
      - name: 📦 Deploy stack on remote server
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem
          ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << EOF
            docker stack deploy -c ${{ env.COMPOSE_PATH }} ${{ env.STACK_NAME }} --detach
            sleep 10
            docker service ls --filter name=${{ env.STACK_NAME }} --format "table {{.Name}}\t{{.Image}}\t{{.Replicas}}"
            docker service inspect --format='{{.Spec.TaskTemplate.ContainerSpec.Image}}' ${{ env.STACK_NAME }}_backend
          EOF
